package Services;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.Response.Status;

import com.supmeca.colMEA.domain.Set;
@Path("/Sets")
public class SetRessource {


		@GET
		@Path("/Sets")
		@Produces(MediaType.APPLICATION_JSON)
		public Response findAllSetss(){

			List<Set> Sets = null;
			Sets = SetEjb.findAllSets();
			if (Sets==null)
				return Response.status(Status.NOT_FOUND).build();
			else
				return Response.ok(Sets).build();

		}

		@POST
		@Path("/addSet")
		@Consumes(MediaType.APPLICATION_JSON)
		@Produces(MediaType.APPLICATION_JSON)

		public Response addSet (Set set, @Context UriInfo uriInfo) {
			SetEjb.CreateSet(set);
			UriBuilder builder = uriInfo.getAbsolutePathBuilder();
			return Response.created(builder.build()).entity(set).build();
		}

		@PUT
		@Path("/updateSet")
		@Consumes(MediaType.APPLICATION_JSON)
		public Response updateSet(Set set){
			SetEjb.EditSet(set);
			if (set == null)
				return Response.status(Status.ACCEPTED).entity("User successfully Updated").build();
			else
				return Response.status(Status.NOT_FOUND).entity("User Not found").build();
		}
		@DELETE
		@Path("/setDelete")
		@Consumes(MediaType.APPLICATION_JSON)
		public Response deleteSet(Set set){
			SetEjb.removeSet(set);
			if (set == null)
				return Response.status(Status.ACCEPTED).entity("User successfully Deleted").build();
			else
				return Response.status(Status.NOT_FOUND).entity("User Not found").build();
		}
		@GET
		@Path("findSet/{id}")
		@Produces(MediaType.APPLICATION_JSON)
		public Response findSetById(@PathParam("id") Integer id){
			Set s = SetEjb.findSetById(id);
			if (s==null)
				return Response.status(Status.NOT_FOUND).entity("User Not Found").build();
			else
				return Response.ok(s).build();

		}
		@DELETE
		@Path("DeleteSet/{id}")
		@Consumes(MediaType.APPLICATION_JSON)
		public Response deleteSet(@PathParam("id") Integer id){
			SetEjb.DeleteSet(id);
			if (id == null)
				return Response.status(Status.ACCEPTED).entity("User successfully Deleted").build();
			else
				return Response.status(Status.NOT_FOUND).entity("User Not found").build();
		}

}
