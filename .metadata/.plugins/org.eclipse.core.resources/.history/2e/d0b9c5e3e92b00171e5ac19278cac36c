package Services;

import java.util.List;

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.Response.Status;

import com.supmeca.colMEA.business.StudyServiceLocal;
import com.supmeca.colMEA.domain.Project;
import com.supmeca.colMEA.domain.Study;

@Path("/Studies")
public class StudyRessource {
	@Inject
	StudyServiceLocal StudyEjb;


	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response findAllStudys(){
		
		List<Study> Studys = null;
		Studys = StudyEjb.findAllStudys();
		if (Studys==null)
			return Response.status(Status.NOT_FOUND).build();
		else
			return Response.ok(Studys).build();
			
	}
	
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	
	public Response addStudy (Study Study, @Context UriInfo uriInfo) {
		StudyEjb.CreateStudy(Study);
		UriBuilder builder = uriInfo.getAbsolutePathBuilder();
		return Response.created(builder.build()).entity(Study).build();
	}
 
	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	public Response updateStudy(Study Study){
		StudyEjb.EditStudy(Study);
		if (Study == null)
			return Response.status(Status.ACCEPTED).entity("User successfully Updated").build();
		else
			return Response.status(Status.NOT_FOUND).entity("User Not found").build();
	}
	@DELETE
	@Consumes(MediaType.APPLICATION_JSON)
	public Response deleteStudy(Study Study){
		StudyEjb.removeStudy(Study);
	if (Study == null)
		return Response.status(Status.ACCEPTED).entity("User successfully Deleted").build();
	else
		return Response.status(Status.NOT_FOUND).entity("User Not found").build();
	}
	@GET
	@Path("findStudy/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findStudyById(@PathParam("id") Integer id){
		Study En = StudyEjb.findStudyById(id);
	 if (En==null)
			return Response.status(Status.NOT_FOUND).entity("User Not Found").build();
		else
			return Response.ok(En).build();
	 
	}
	@DELETE
	@Path("DeleteStudy/{id}")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response deleteStudy(@PathParam("id") Integer id){
		StudyEjb.DeleteStudy(id);
	if (id == null)
		return Response.status(Status.ACCEPTED).entity("User successfully Deleted").build();
	else
		return Response.status(Status.NOT_FOUND).entity("User Not found").build();
	}

//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  find Study by Type
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
	@GET
	@Path("findStudyByType/{type}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findProjectByTeam(@PathParam("type") String type){
		Study Study = StudyEjb.findStudyByType(type);
	 if (Study==null)
			return Response.status(Status.NOT_FOUND).entity("User Not Found").build();
		else
			return Response.ok(Study).build();
	 
	}

//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  find Study by Project
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
	@GET
	@Path("findStudyByProject/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findStudyByProject(@PathParam("id") Integer id){
		Study Study = StudyEjb.findStudyByProject(id);
	 if (Study==null)
			return Response.status(Status.NOT_FOUND).entity("User Not Found").build();
		else
			return Response.ok(Study).build();
	 
	}
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  find Study by Team
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
	@GET
	@Path("findStudyByTeam/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findStudyByTeam(@PathParam("id") Integer id){
		Study Study = StudyEjb.findStudyByTeam(id);
	 if (Study==null)
			return Response.status(Status.NOT_FOUND).entity("User Not Found").build();
		else
			return Response.ok(Study).build();
	 
	}

//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  find Studies by Project
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
	@GET
	@Path("findStudiesByProject/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findStudiesByProject(@PathParam("id") Integer id){
		List<Study> Studies = StudyEjb.findStudiesByProject(id);
	 if (Studies==null)
			return Response.status(Status.NOT_FOUND).entity("User Not Found").build();
		else
			return Response.ok(Studies).build();
	 
	}
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  find Studies by Team
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
	@GET
	@Path("findStudiesByTeam/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findStudiesByTeam(@PathParam("id") Integer id){
		List<Study> Studies = StudyEjb.findStudiesByTeam(id);
	 if (Studies==null)
			return Response.status(Status.NOT_FOUND).entity("Study Not Found").build();
		else
			return Response.ok(Studies).build();
	 
	}
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  Duplicate Studies by Team
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*-
	@POST
	@Path("duplicateStudy/{id}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	
	public Response duplicateStudy (@PathParam("id") Integer id, @Context UriInfo uriInfo) {
		
		Study study = StudyEjb.findStudyById(id);
		Study study1 = new Study();
		study1.setId_study(study.getId_study());
		study1.setNumber(study.getNumber());
		study1.setProject(study.getProject());
		study1.setTeam(study.getTeam());
		StudyEjb.CreateStudy(study);
		UriBuilder builder = uriInfo.getAbsolutePathBuilder();
		return Response.created(builder.build()).entity(study).build();
	}
}
