package Services;

import java.util.List;

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.Response.Status;

import com.supmeca.colMEA.business.EngineerServiceLocal;
import com.supmeca.colMEA.business.TeamServiceLocal;
import com.supmeca.colMEA.domain.Engineer;
import com.supmeca.colMEA.domain.Manager;
import com.supmeca.colMEA.domain.Project;
import com.supmeca.colMEA.domain.Team;
import com.supmeca.colMEA.domain.Teams_Engineers;
import com.supmeca.colMEA.domain.Teams_EngineersFK;

@Path("/Teams")
public class TeamRessource {

	@Inject
	TeamServiceLocal TeamEjb;
	
	@Inject
	EngineerServiceLocal EngineerEjb;
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response findAllTeams(){
		
		List<Team> Teams = null;
		Teams = TeamEjb.findAllTeams();
		if (Teams==null)
			return Response.status(Status.NOT_FOUND).build();
		else
			return Response.ok(Teams).build();
			
	}
	
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	
	public Response addTeam (Team Team, @Context UriInfo uriInfo) {
		TeamEjb.CreateTeam(Team);
		UriBuilder builder = uriInfo.getAbsolutePathBuilder();
		return Response.created(builder.build()).entity(Team).build();
	}
 
	
	@POST
	@Path("addTeamWithCoord")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)

	public Response addTeamWithCoord (Team Team, Integer id) {
		TeamEjb.addTeamWithCoord(Team, id);
		if (id != null)
			return Response.status(Status.ACCEPTED).entity("Team successfully added").build();
		else
			return Response.status(Status.NOT_FOUND).entity("Coordinator Not found").build();
	}
	
	
	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	public Response updateTeam(Team Team){
		TeamEjb.EditTeam(Team);
		if (Team == null)
			return Response.status(Status.ACCEPTED).entity("User successfully Updated").build();
		else
			return Response.status(Status.NOT_FOUND).entity("User Not found").build();
	}
	@DELETE
	@Consumes(MediaType.APPLICATION_JSON)
	public Response deleteTeam(Team Team){
		TeamEjb.removeTeam(Team);
	if (Team == null)
		return Response.status(Status.ACCEPTED).entity("User successfully Deleted").build();
	else
		return Response.status(Status.NOT_FOUND).entity("User Not found").build();
	}
	
	@GET
	@Path("findTeam/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findTeamById(@PathParam("id") Integer id){
		Team En = TeamEjb.findTeamById(id);
	 if (En==null)
			return Response.status(Status.NOT_FOUND).entity("User Not Found").build();
		else
			return Response.ok(En).build();
	 
	}
	@DELETE
	@Path("DeleteTeam/{id}")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response deleteTeam(@PathParam("id") Integer id){
		TeamEjb.DeleteTeam(id);
	if (id == null)
		return Response.status(Status.ACCEPTED).entity("User successfully Deleted").build();
	else
		return Response.status(Status.NOT_FOUND).entity("User Not found").build();
	}
	
	//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
	//  Add Enginner to Team service
	//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 

	@POST
	@Path("addEngineer/{id_team}/{id_user}")
	@Produces("application/json")
	@Consumes("application/json")
 	
	public Response reserveSeat(@PathParam("id_team")Integer id_team,@PathParam("id_user")Integer id_user)
	{
		/*Date dateReservation=null;
		SimpleDateFormat simple_date= new 
				SimpleDateFormat("dd/MM/yyyy");
		try {
			 dateReservation =  (Date) simple_date.parse(date_s);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
	
		Teams_Engineers teamEng = new Teams_Engineers();
		
		Teams_EngineersFK teamEngFK = new Teams_EngineersFK();
		teamEngFK.setId_team(id_team);
		teamEngFK.setId_user(id_user);
		
		Team team = TeamEjb.findTeamById(id_team);
		Engineer engineer = EngineerEjb.findEngineerById(id_user);
				
		if ((team!=null)&&(engineer!=null))
		{
			if (EngineerEjb.addEngineerToTeam(team, engineer))
						  {
						return Response.status(Status.ACCEPTED).entity("Success team was added").build();
	 			}else
		 		{
					return Response.status(Status.NOT_FOUND).build();

		 		}
			 
			 
		}
		 else
		 {
				return Response.status(Status.NOT_FOUND).entity(" Team/Engineer Not Found").build();

		 }
	}
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  Display teams and Enginner  service
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 

	
	@GET
	@Path("findTeamsEngineers")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findTeamsEngineers(){
		
		List<Teams_Engineers> Teams = null;
		Teams = TeamEjb.findTeamsEngineers();
		if (Teams==null)
			return Response.status(Status.NOT_FOUND).build();
		else
			return Response.ok(Teams).build();
			
	}
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  Display team by coordinator id service
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 

	
	@GET
	@Path("findTeamByCoordinator/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findTeamByCoordiantor(@PathParam("id") Integer id){
		
		Team team = null;
		team = TeamEjb.findTeamByCoordinator(id);
		if (team==null)
			return Response.status(Status.NOT_FOUND).build();
		else
			return Response.ok(team).build();
			
	}

//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  Display team by engineer id service
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 

	
	@GET
	@Path("findTeamByEngineer/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findTeamByEngineer(@PathParam("id") Integer id){
		
		Team team = null;
		team = TeamEjb.findTeamByEngineer(id);
		if (team==null)
			return Response.status(Status.NOT_FOUND).build();
		else
			return Response.ok(team).build();
			
	}
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 
//  Display team by engineer id service
//-*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*--*-*-*-*-*-*- 

	
	@GET
	@Path("findTeamsByEngineer/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response findTeamsByEngineer(@PathParam("id") Integer id){
		
		List<Team> teams = null;
		teams = TeamEjb.findTeamsByEngineer(id);
		if (teams==null)
			return Response.status(Status.NOT_FOUND).build();
		else
			return Response.ok(teams).build();
			
	}


}
